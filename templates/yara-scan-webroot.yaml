# This template leverages FIM to watch a web root directory and triggers 
# a YARA scan for webshells against changed files.
# The FIM pattern only gets applied to systems tagged with "webserver".
# This template leverages an auto-tag feature to tag webservers based
# on the presence of common web server processes.
# 
# This template uses an embedded version of this rule: 
# https://github.com/nsacyber/Mitigating-Web-Shells/blob/master/extended.webshell_detection.yara
version: 3
extensions:
    - ext-yara
    - ext-integrity
hives:
    dr-general:
        Auto-Tag Web Servers:
            data:
                detect:
                    events:
                        - NEW_PROCESS
                        - EXISTING_PROCESS
                    op: matches
                    path: event/FILE_PATH
                    re: (apache|httpd|nginx|lighttpd|tomcat|java|w3wp|iisexpress|php-fpm|gunicorn|uwsgi)
                respond:
                    - action: add tag
                      tag: webserver
            usr_mtd:
                enabled: true
                expiry: 0
                tags: []
                comment: "Watch for common web server processes and tag the system accordingly."
        Yara Scan Web Root:
            data:
                detect:
                    event: FIM_HIT
                    op: and
                    rules:
                        - op: matches
                          path: event/FILE_PATH
                          re: .*(www|html|webapps|htdocs).*
                        - op: is tagged
                          tag: webserver
                        - op: or
                          rules:
                            - op: is
                              path: event/ACTION
                              value: modified
                            - op: is
                              path: event/ACTION
                              value: added
                respond:
                    - action: task
                      command: yara_scan hive://yara/webshells -f "{{ .event.FILE_PATH }}"
                      investigation: Yara Scan Web Root
                      suppression:
                        is_global: false
                        keys:
                            - '{{ .event.FILE_PATH }}'
                            - '{{ .event.ACTION }}'
                        max_count: 1
                        period: 1m
            usr_mtd:
                enabled: true
                expiry: 0
                tags: []
                comment: "Watch for FIM hits involving locations related to web roots and trigger with a YARA scan."
    extension_config:
        ext-integrity:
            data:
                fim_rules:
                    webroots:
                        filters:
                            platforms:
                                - linux
                                - windows
                                - macos
                            tags:
                                - webserver
                        patterns:
                            - /srv/www/*
                            - /usr/share/nginx/html/*
                            - /var/lib/tomcat/webapps/ROOT/*
                            - /var/www/*
                            - C:\inetpub\wwwroot\*
                            - C:\xampp\htdocs\*
                            - C:\wamp\www\*
    yara:
        webshells:
            data:
                rule: "/*\r\n    WARNING: Host-based security systems may DETECT this file as malicious!\r\n    Because the text used in these signatures is also used in some malware definitions, this file may be detected as malicious. If this happens, it is recommended that the limited.yara.bin file be used instead. Because limited.yara.bin is a compiled yara ruleset, it is unlikely to trigger host-based security systems\r\n\r\n    ADDITIONAL WARNING: These extended rules are EXPECTED to have some false positives. These rules rely on detecting suspicious indicators that are often present in web shell malware but may also occur within benign files. \r\n*/\r\n\r\nprivate rule b374k\r\n{\r\n    meta:\r\n        author = \"Blair Gillam (@blairgillam)\"\r\n\r\n    strings:\r\n        $string = \"b374k\"\r\n        $password_var = \"$s_pass\"\r\n        $default_password = \"0de664ecd2be02cdd54234a0d1229b43\"\r\n\r\n    condition:\r\n        any of them\r\n}\r\n\r\nprivate rule pas_tool\r\n{\r\n    meta:\r\n        author = \"US CERT\"\r\n\r\n    strings:\r\n        $php = \"<?php\"\r\n        $base64decode = /\\='base'\\.\\(\\d+\\*\\d+\\)\\.'_de'\\.'code'/ \r\n        $strreplace = \"(str_replace(\"\r\n        $md5 = \".substr(md5(strrev(\"\r\n        $gzinflate = \"gzinflate\"\r\n        $cookie = \"_COOKIE\"\r\n        $isset = \"isset\"\r\n\r\n    condition:\r\n        (filesize > 20KB and filesize < 22KB) and\r\n        #cookie == 2 and\r\n        #isset == 3 and\r\n        all of them\r\n}\r\n\r\nprivate rule pbot\r\n{\r\n    meta:\r\n        author = \"Jacob Baines (Tenable)\"\r\n\r\n    strings:\r\n        $ = \"class pBot\" ascii\r\n        $ = \"function start(\" ascii\r\n        $ = \"PING\" ascii\r\n        $ = \"PONG\" ascii\r\n\r\n    condition:\r\n        all of them\r\n}\r\n\r\nprivate rule passwordProtection\r\n{\r\n    meta:\r\n        source = \"https://github.com/nbs-system/php-malware-finder\"\r\n        \r\n    strings:\r\n        $md5 = /md5\\s*\\(\\s*\\$_(GET|REQUEST|POST|COOKIE|SERVER)[^)]+\\)\\s*===?\\s*['\"][0-9a-f]{32}['\"]/ nocase\r\n        $sha1 = /sha1\\s*\\(\\s*\\$_(GET|REQUEST|POST|COOKIE|SERVER)[^)]+\\)\\s*===?\\s*['\"][0-9a-f]{40}['\"]/ nocase\r\n    condition:\r\n        (any of them) \r\n}\r\n\r\nprivate rule ObfuscatedPhp\r\n{\r\n    meta:\r\n        source = \"https://github.com/nbs-system/php-malware-finder\"\r\n        \r\n    strings:\r\n        $eval = /(<\\?php|[;{}])[ \\t]*@?(eval|preg_replace|system|assert|passthru|(pcntl_)?exec|shell_exec|call_user_func(_array)?)\\s*\\(/ nocase  // ;eval( <- this is dodgy\r\n        $eval_comment = /(eval|preg_replace|system|assert|passthru|(pcntl_)?exec|shell_exec|call_user_func(_array)?)\\/\\*[^\\*]*\\*\\/\\(/ nocase  // eval/*lol*/( <- this is dodgy\r\n        $b374k = \"'ev'.'al'\"\r\n        $align = /(\\$\\w+=[^;]*)*;\\$\\w+=@?\\$\\w+\\(/  //b374k\r\n        $weevely3 = /\\$\\w=\\$[a-zA-Z]\\('',\\$\\w\\);\\$\\w\\(\\);/  // weevely3 launcher\r\n        $c99_launcher = /;\\$\\w+\\(\\$\\w+(,\\s?\\$\\w+)+\\);/  // http://bartblaze.blogspot.fr/2015/03/c99shell-not-dead.html\r\n        $nano = /\\$[a-z0-9-_]+\\[[^]]+\\]\\(/ //https://github.com/UltimateHackers/nano\r\n        $ninja = /base64_decode[^;]+getallheaders/ //https://github.com/UltimateHackers/nano\r\n        $variable_variable = /\\${\\$[0-9a-zA-z]+}/\r\n        $too_many_chr = /(chr\\([\\d]+\\)\\.){8}/  // concatenation of more than eight `chr()`\r\n        $concat = /(\\$[^\\n\\r]+\\.){5}/  // concatenation of more than 5 words\r\n        $concat_with_spaces = /(\\$[^\\n\\r]+\\. ){5}/  // concatenation of more than 5 words, with spaces\r\n        $var_as_func = /\\$_(GET|POST|COOKIE|REQUEST|SERVER)\\s*\\[[^\\]]+\\]\\s*\\(/\r\n        $comment = /\\/\\*([^*]|\\*[^\\/])*\\*\\/\\s*\\(/  // eval /* comment */ (php_code)\r\ncondition:\r\n        (any of them)\r\n}\r\n\r\nprivate rule DodgyPhp\r\n{\r\n    meta:\r\n        source = \"https://github.com/nbs-system/php-malware-finder\"\r\n        \r\n    strings:\r\n        $basedir_bypass = /curl_init\\s*\\(\\s*[\"']file:\\/\\// nocase\r\n        $basedir_bypass2 = \"file:file:///\" // https://www.intelligentexploit.com/view-details.html?id=8719\r\n        $disable_magic_quotes = /set_magic_quotes_runtime\\s*\\(\\s*0/ nocase\r\n\r\n        $execution = /\\b(eval|assert|passthru|exec|include|system|pcntl_exec|shell_exec|base64_decode|`|array_map|ob_start|call_user_func(_array)?)\\s*\\(\\s*(base64_decode|php:\\/\\/input|str_rot13|gz(inflate|uncompress)|getenv|pack|\\\\?\\$_(GET|REQUEST|POST|COOKIE|SERVER))/ nocase  // function that takes a callback as 1st parameter\r\n        $execution2 = /\\b(array_filter|array_reduce|array_walk(_recursive)?|array_walk|assert_options|uasort|uksort|usort|preg_replace_callback|iterator_apply)\\s*\\(\\s*[^,]+,\\s*(base64_decode|php:\\/\\/input|str_rot13|gz(inflate|uncompress)|getenv|pack|\\\\?\\$_(GET|REQUEST|POST|COOKIE|SERVER))/ nocase  // functions that takes a callback as 2nd parameter\r\n        $execution3 = /\\b(array_(diff|intersect)_u(key|assoc)|array_udiff)\\s*\\(\\s*([^,]+\\s*,?)+\\s*(base64_decode|php:\\/\\/input|str_rot13|gz(inflate|uncompress)|getenv|pack|\\\\?\\$_(GET|REQUEST|POST|COOKIE|SERVER))\\s*\\[[^]]+\\]\\s*\\)+\\s*;/ nocase  // functions that takes a callback as 2nd parameter\r\n\r\n        $htaccess = \"SetHandler application/x-httpd-php\"\r\n        $iis_com = /IIS:\\/\\/localhost\\/w3svc/\r\n        $include = /include\\s*\\(\\s*[^\\.]+\\.(png|jpg|gif|bmp)/  // Clever includes\r\n        $ini_get = /ini_(get|set|restore)\\s*\\(\\s*['\"](safe_mode|open_basedir|disable_(function|classe)s|safe_mode_exec_dir|safe_mode_include_dir|register_globals|allow_url_include)/ nocase\r\n        $register_function = /register_[a-z]+_function\\s*\\(\\s*['\"]\\s*(eval|assert|passthru|exec|include|system|shell_exec|`)/  // https://github.com/nbs-system/php-malware-finder/issues/41\r\n        $safemode_bypass = /\\x00\\/\\.\\.\\/|LD_PRELOAD/\r\n        $shellshock = /\\(\\)\\s*{\\s*[a-z:]\\s*;\\s*}\\s*;/\r\n        $udp_dos = /fsockopen\\s*\\(\\s*['\"]udp:\\/\\// nocase\r\n        $various = \"<!--#exec cmd=\"  //http://www.w3.org/Jigsaw/Doc/User/SSI.html#exec\r\n        $at_eval = /@eval\\s*\\(/ nocase\r\n        $double_var = /\\${\\s*\\${/\r\n        $extract = /extract\\s*\\(\\s*\\$_(GET|POST|REQUEST|COOKIE|SERVER)/\r\n        $reversed = /noitcnuf_etaerc|metsys|urhtssap|edulcni|etucexe_llehs/ nocase\r\n                $silenced_include =/@\\s*include\\s*/ nocase\r\n\r\n    condition:\r\n        (any of them)\r\n}\r\n\r\nprivate rule DangerousPhp\r\n{\r\n    meta:\r\n        source = \"https://github.com/nbs-system/php-malware-finder\"\r\n        \r\n    strings:\r\n        $system = \"system\" fullword nocase  // localroot bruteforcers have a lot of this\r\n\r\n        $ = \"array_filter\" fullword nocase\r\n        $ = \"assert\" fullword nocase\r\n        $ = \"backticks\" fullword nocase\r\n        $ = \"call_user_func\" fullword nocase\r\n        $ = \"eval\" fullword nocase\r\n        $ = \"exec\" fullword nocase\r\n        $ = \"fpassthru\" fullword nocase\r\n        $ = \"fsockopen\" fullword nocase\r\n        $ = \"function_exists\" fullword nocase\r\n        $ = \"getmygid\" fullword nocase\r\n        $ = \"shmop_open\" fullword nocase\r\n        $ = \"mb_ereg_replace_callback\" fullword nocase\r\n        $ = \"passthru\" fullword nocase\r\n        $ = /pcntl_(exec|fork)/ fullword nocase\r\n        $ = \"php_uname\" fullword nocase\r\n        $ = \"phpinfo\" fullword nocase\r\n        $ = \"posix_geteuid\" fullword nocase\r\n        $ = \"posix_getgid\" fullword nocase\r\n        $ = \"posix_getpgid\" fullword nocase\r\n        $ = \"posix_getppid\" fullword nocase\r\n        $ = \"posix_getpwnam\" fullword nocase\r\n        $ = \"posix_getpwuid\" fullword nocase\r\n        $ = \"posix_getsid\" fullword nocase\r\n        $ = \"posix_getuid\" fullword nocase\r\n        $ = \"posix_kill\" fullword nocase\r\n        $ = \"posix_setegid\" fullword nocase\r\n        $ = \"posix_seteuid\" fullword nocase\r\n        $ = \"posix_setgid\" fullword nocase\r\n        $ = \"posix_setpgid\" fullword nocase\r\n        $ = \"posix_setsid\" fullword nocase\r\n        $ = \"posix_setsid\" fullword nocase\r\n        $ = \"posix_setuid\" fullword nocase\r\n        $ = \"preg_replace_callback\" fullword\r\n        $ = \"proc_open\" fullword nocase\r\n        $ = \"proc_close\" fullword nocase\r\n        $ = \"popen\" fullword nocase\r\n        $ = \"register_shutdown_function\" fullword nocase\r\n        $ = \"register_tick_function\" fullword nocase\r\n        $ = \"shell_exec\" fullword nocase\r\n        $ = \"shm_open\" fullword nocase\r\n        $ = \"show_source\" fullword nocase\r\n        $ = \"socket_create(AF_INET, SOCK_STREAM, SOL_TCP)\" nocase\r\n        $ = \"stream_socket_pair\" nocase\r\n        $ = \"suhosin.executor.func.blacklist\" nocase\r\n        $ = \"unregister_tick_function\" fullword nocase\r\n        $ = \"win32_create_service\" fullword nocase\r\n        $ = \"xmlrpc_decode\" fullword nocase \r\n        $ = /ob_start\\s*\\(\\s*[^\\)]/  //ob_start('assert'); echo $_REQUEST['pass']; ob_end_flush();\r\n\r\n        $whitelist = /escapeshellcmd|escapeshellarg/ nocase\r\n\r\n    condition:\r\n        (not $whitelist and (5 of them or #system > 250))\r\n}\r\n\r\nprivate rule IRC\r\n{\r\n    meta:\r\n        source = \"https://github.com/nbs-system/php-malware-finder\"\r\n        \r\n    strings:\r\n        $ = \"USER\" fullword nocase\r\n        $ = \"PASS\" fullword nocase\r\n        $ = \"PRIVMSG\" fullword nocase\r\n        $ = \"MODE\" fullword nocase\r\n        $ = \"PING\" fullword nocase\r\n        $ = \"PONG\" fullword nocase\r\n        $ = \"JOIN\" fullword nocase\r\n        $ = \"PART\" fullword nocase\r\n\r\n    condition:\r\n        5 of them\r\n}\r\n\r\nprivate rule base64_strings\r\n{\r\n    meta:\r\n        source = \"https://github.com/nbs-system/php-malware-finder\"\r\n        \r\n    strings:\r\n        $user_agent = \"SFRUUF9VU0VSX0FHRU5UCg\"\r\n        $eval = \"ZXZhbCg\"\r\n        $system = \"c3lzdGVt\"\r\n        $preg_replace = \"cHJlZ19yZXBsYWNl\"\r\n        $exec = \"ZXhlYyg\"\r\n        $base64_decode = \"YmFzZTY0X2RlY29kZ\"\r\n        $perl_shebang = \"IyEvdXNyL2Jpbi9wZXJsCg\"\r\n        $cmd_exe = \"Y21kLmV4ZQ\"\r\n        $powershell = \"cG93ZXJzaGVsbC5leGU\"\r\n\r\n    condition:\r\n        any of them\r\n}\r\n\r\nprivate rule hex\r\n{\r\n    meta:\r\n        source = \"https://github.com/nbs-system/php-malware-finder\"\r\n        \r\n    strings:\r\n        $globals = \"\\\\x47\\\\x4c\\\\x4f\\\\x42\\\\x41\\\\x4c\\\\x53\" nocase\r\n        $eval = \"\\\\x65\\\\x76\\\\x61\\\\x6C\\\\x28\" nocase\r\n        $exec = \"\\\\x65\\\\x78\\\\x65\\\\x63\" nocase\r\n        $system = \"\\\\x73\\\\x79\\\\x73\\\\x74\\\\x65\\\\x6d\" nocase\r\n        $preg_replace = \"\\\\x70\\\\x72\\\\x65\\\\x67\\\\x5f\\\\x72\\\\x65\\\\x70\\\\x6c\\\\x61\\\\x63\\\\x65\" nocase\r\n        $http_user_agent = \"\\\\x48\\\\124\\\\x54\\\\120\\\\x5f\\\\125\\\\x53\\\\105\\\\x52\\\\137\\\\x41\\\\107\\\\x45\\\\116\\\\x54\" nocase\r\n        $base64_decode = \"\\\\x61\\\\x73\\\\x65\\\\x36\\\\x34\\\\x5f\\\\x64\\\\x65\\\\x63\\\\x6f\\\\x64\\\\x65\\\\x28\\\\x67\\\\x7a\\\\x69\\\\x6e\\\\x66\\\\x6c\\\\x61\\\\x74\\\\x65\\\\x28\" nocase\r\n    \r\n    condition:\r\n        any of them\r\n}\r\n\r\nprivate rule Hpack\r\n{\r\n    meta:\r\n        source = \"https://github.com/nbs-system/php-malware-finder\"\r\n        \r\n    strings:\r\n        $globals = \"474c4f42414c53\" nocase\r\n        $eval = \"6576616C28\" nocase\r\n        $exec = \"65786563\" nocase\r\n        $system = \"73797374656d\" nocase\r\n        $preg_replace = \"707265675f7265706c616365\" nocase\r\n        $base64_decode = \"61736536345f6465636f646528677a696e666c61746528\" nocase\r\n    \r\n    condition:\r\n        any of them\r\n}\r\n\r\nprivate rule strrev\r\n{\r\n    meta:\r\n        source = \"https://github.com/nbs-system/php-malware-finder\"\r\n        \r\n    strings:\r\n        $globals = \"slabolg\" nocase fullword\r\n        $preg_replace = \"ecalper_gerp\" nocase fullword\r\n        $base64_decode = \"edoced_46esab\" nocase fullword\r\n        $gzinflate = \"etalfnizg\" nocase fullword\r\n    \r\n    condition:\r\n        any of them\r\n}\r\n\r\n\r\nprivate rule SuspiciousEncoding\r\n{\r\n    meta:\r\n        source = \"https://github.com/nbs-system/php-malware-finder\"\r\n        \r\n    condition:\r\n        (base64_strings or hex or strrev or Hpack)\r\n}\r\n\r\nprivate rule DodgyStrings\r\n{\r\n    meta:\r\n        source = \"https://github.com/nbs-system/php-malware-finder\"\r\n        \r\n    strings:\r\n        $ = \".bash_history\"\r\n        $ = \"404 not found\" nocase\r\n        $ = \"file not found\" nocase\r\n        $ = \"forbidden\" nocase\r\n        $ = /AddType\\s+application\\/x-httpd-(php|cgi)/ nocase\r\n        $ = /php_value\\s*auto_prepend_file/ nocase\r\n        $ = /SecFilterEngine\\s+Off/ nocase  // disable modsec\r\n        $ = /Add(Handler|Type|OutputFilter)\\s+[^\\s]+\\s+\\.htaccess/ nocase\r\n        $ = \".mysql_history\"\r\n        $ = \".ssh/authorized_keys\"\r\n        $ = \"/(.*)/e\"  // preg_replace code execution\r\n        $ = \"/../../../\"\r\n        $ = \"/etc/passwd\"\r\n        $ = \"/etc/proftpd.conf\"\r\n        $ = \"/etc/resolv.conf\"\r\n        $ = \"/etc/shadow\"\r\n        $ = \"/etc/syslog.conf\"\r\n        $ = \"/proc/cpuinfo\" fullword\r\n        $ = \"/var/log/lastlog\"\r\n        $ = \"/windows/system32/\"\r\n        $ = \"LOAD DATA LOCAL INFILE\" nocase\r\n        $ = \"WScript.Shell\"\r\n        $ = \"WinExec\"\r\n        $ = \"b374k\" fullword nocase\r\n        $ = \"backdoor\" fullword nocase\r\n        $ = /(c99|r57|fx29)shell/\r\n        $ = \"cmd.exe\" fullword nocase\r\n        $ = \"powershell.exe\" fullword nocase\r\n        $ = /defac(ed|er|ement|ing)/ fullword nocase\r\n        $ = \"evilc0ders\" fullword nocase\r\n        $ = \"exploit\" fullword nocase\r\n        $ = \"find . -type f\" fullword\r\n        $ = \"hashcrack\" nocase\r\n        $ = \"id_rsa\" fullword\r\n        $ = \"ipconfig\" fullword nocase\r\n        $ = \"kernel32.dll\" fullword nocase\r\n        $ = \"kingdefacer\" nocase\r\n        $ = \"Wireghoul\" nocase fullword\r\n        $ = \"LD_PRELOAD\" fullword\r\n        $ = \"libpcprofile\"  // CVE-2010-3856 local root\r\n        $ = \"locus7s\" nocase\r\n        $ = \"ls -la\" fullword\r\n        $ = \"meterpreter\" fullword\r\n        $ = \"nc -l\" fullword\r\n        $ = \"netstat -an\" fullword\r\n        $ = \"php://\"\r\n        $ = \"ps -aux\" fullword\r\n        $ = \"rootkit\" fullword nocase\r\n        $ = \"slowloris\" fullword nocase\r\n        $ = \"suhosin\" fullword\r\n        $ = \"sun-tzu\" fullword nocase // quote from the Art of War\r\n        $ = /trojan (payload)?/\r\n        $ = \"uname -a\" fullword\r\n        $ = \"visbot\" nocase fullword\r\n        $ = \"warez\" fullword nocase\r\n        $ = \"whoami\" fullword\r\n        $ = /(r[e3]v[e3]rs[e3]|w[3e]b|cmd)\\s*sh[e3]ll/ nocase\r\n        $ = /-perm -0[24]000/ // find setuid files\r\n        $ = /\\/bin\\/(ba)?sh/ fullword\r\n        $ = /hack(ing|er|ed)/ nocase\r\n        $ = /(safe_mode|open_basedir) bypass/ nocase\r\n        $ = /xp_(execresultset|regenumkeys|cmdshell|filelist)/\r\n\r\n        $vbs = /language\\s*=\\s*vbscript/ nocase\r\n        $asp = \"scripting.filesystemobject\" nocase\r\n\r\n    condition:\r\n        (IRC or 2 of them)\r\n}\r\n\r\nprivate rule generic_jsp\r\n{\r\n    meta:\r\n        source= \"https://www.tenable.com/blog/hunting-for-web-shells\"\r\n\r\n    strings:\r\n        $ = /Runtime.getRuntime\\(\\).exec\\(request.getParameter\\(\\\"[a-zA-Z0-9]+\\\"\\)\\);/ ascii\r\n\r\n    condition:\r\n        all of them\r\n}\r\n\r\nprivate rule eval\r\n{\r\n    meta:\r\n        source = \"https://www.tenable.com/blog/hunting-for-web-shells\"\r\n\r\n    strings:\r\n        $ = /eval[\\( \\t]+((base64_decode[\\( \\t]+)|(str_rot13[\\( \\t]+)|(gzinflate[\\( \\t]+)|(gzuncompress[\\( \\t]+)|(strrev[\\( \\t]+)|(gzdecode[\\( \\t]+))+/\r\n\r\n    condition:\r\n        all of them\r\n}\r\n\r\nprivate rule fopo\r\n{\r\n    meta:\r\n        source = \"https://github.com/tenable/yara-rules/blob/master/webshells/\"\r\n\r\n    strings:\r\n        $ = /\\$[a-zA-Z0-9]+=\\\"\\\\(142|x62)\\\\(141|x61)\\\\(163|x73)\\\\(145|x65)\\\\(66|x36)\\\\(64|x34)\\\\(137|x5f)\\\\(144|x64)\\\\(145|x65)\\\\(143|x63)\\\\(157|x6f)\\\\(144|x64)\\\\(145|x65)\\\";@eval\\(/\r\n\r\n    condition:\r\n        all of them\r\n}\r\n\r\nprivate rule hardcoded_urldecode\r\n{\r\n    meta:\r\n        source = \"https://github.com/tenable/yara-rules/blob/master/webshells/\"\r\n\r\n    strings:\r\n        $ = /urldecode[\\t ]*\\([\\t ]*'(%[0-9a-fA-F][0-9a-fA-F])+'[\\t ]*\\)/\r\n\r\n    condition:\r\n        all of them\r\n}\r\n\r\nprivate rule chr_obfuscation\r\n{\r\n    meta:\r\n        source = \"https://github.com/tenable/yara-rules/blob/master/webshells/\"\r\n\r\n    strings:\r\n        $ = /\\$[^=]+=[\\t ]*(chr\\([0-9]+\\)\\.?){2,}/\r\n\r\n    condition:\r\n        all of them\r\n}\r\n\r\nprivate rule phpInImage\r\n{\r\n    meta:\r\n        source = \"Vlad https://github.com/vlad-s\"\r\n\r\n    strings:\r\n        $php_tag = \"<?php\"\r\n        $gif = {47 49 46 38 ?? 61} // GIF8[version]a\r\n        $jfif = { ff d8 ff e? 00 10 4a 46 49 46 }\r\n        $png = { 89 50 4e 47 0d 0a 1a 0a }\r\n        $jpeg = {FF D8 FF E0 ?? ?? 4A 46 49 46 } \r\n\r\n    condition:\r\n        (($gif at 0) or ($jfif at 0) or ($png at 0) or ($jpeg at 0)) and $php_tag\r\n}\r\n\r\nrule hiddenFunctionality\r\n{\r\n    meta:\r\n        author = \"NSA Cybersecurity\"\r\n        description = \"Hidden functionality allows malware to masquerade as another filetype\"\r\n\r\n    condition:\r\n        phpInImage\r\n}\r\n\r\nrule webshellArtifact \r\n{\r\n    meta:\r\n        author = \"NSA Cybersecurity\"\r\n        description = \"Artifacts common to web shells and rare in benign files\"\r\n\r\n    condition:\r\n        b374k or pas_tool or pbot or generic_jsp\r\n}\r\n\r\nrule suspiciousFunctionality\r\n{\r\n    meta:\r\n        author = \"NSA Cybersecurity\"\r\n        description = \"Artifacts common to web shells and somewhat rare in benign files\"\r\n\r\n    condition:\r\n        passwordProtection or hardcoded_urldecode or fopo or eval\r\n}\r\n\r\nrule obfuscatedFunctionality\r\n{\r\n    meta:\r\n        author = \"NSA Cybersecurity\"\r\n        description = \"Obfuscation sometimes hides malicious functionality\"\r\n\r\n    condition:\r\n        ObfuscatedPhp or chr_obfuscation or SuspiciousEncoding\r\n}\r\n\r\nrule possibleIndicator\r\n{\r\n    meta:\r\n        author = \"NSA Cybersecurity\"\r\n        description = \"Artifacts common to web shells and less common in benign files\"\r\n\r\n    condition:\r\n        DodgyPhp or DangerousPhp or DodgyStrings\r\n}\r\n\r\n\r\nprivate rule APT_Backdoor_MSIL_SUNBURST_1\r\n{\r\n    meta:\r\n        author = \"FireEye\"\r\n        description = \"This rule is looking for portions of the SUNBURST backdoor that are vital to how it functions. The first signature fnv_xor matches a magic byte xor that the sample performs on process, service, and driver names/paths. SUNBURST is a backdoor that has the ability to spawn and kill processes, write and delete files, set and create registry keys, gather system information, and disable a set of forensic analysis tools and services.\"\r\n        source = \"https://github.com/fireeye/sunburst_countermeasures/blob/main/rules/SUNBURST/yara/APT_Backdoor_MSIL_SUNBURST_1.yar\"\r\n    \r\n    strings:\r\n        $cmd_regex_encoded = \"U4qpjjbQtUzUTdONrTY2q42pVapRgooABYxQuIZmtUoA\" wide\r\n        $cmd_regex_plain = { 5C 7B 5B 30 2D 39 61 2D 66 2D 5D 7B 33 36 7D 5C 7D 22 7C 22 5B 30 2D 39 61 2D 66 5D 7B 33 32 7D 22 7C 22 5B 30 2D 39 61 2D 66 5D 7B 31 36 7D }\r\n        $fake_orion_event_encoded = \"U3ItS80rCaksSFWyUvIvyszPU9IBAA==\" wide\r\n        $fake_orion_event_plain = { 22 45 76 65 6E 74 54 79 70 65 22 3A 22 4F 72 69 6F 6E 22 2C }\r\n        $fake_orion_eventmanager_encoded = \"U3ItS80r8UvMTVWyUgKzfRPzEtNTi5R0AA==\" wide\r\n        $fake_orion_eventmanager_plain = { 22 45 76 65 6E 74 4E 61 6D 65 22 3A 22 45 76 65 6E 74 4D 61 6E 61 67 65 72 22 2C }\r\n        $fake_orion_message_encoded = \"U/JNLS5OTE9VslKqNqhVAgA=\" wide\r\n        $fake_orion_message_plain = { 22 4D 65 73 73 61 67 65 22 3A 22 7B 30 7D 22 }\r\n        $fnv_xor = { 67 19 D8 A7 3B 90 AC 5B }\r\n    condition:\r\n        $fnv_xor and ($cmd_regex_encoded or $cmd_regex_plain) or ( ($fake_orion_event_encoded or $fake_orion_event_plain) and ($fake_orion_eventmanager_encoded or $fake_orion_eventmanager_plain) and ($fake_orion_message_encoded and $fake_orion_message_plain) )\r\n}\r\n\r\nprivate rule APT_Backdoor_MSIL_SUNBURST_2\r\n{\r\n    meta:\r\n        author = \"FireEye\"\r\n        description = \"The SUNBURST backdoor uses a domain generation algorithm (DGA) as part of C2 communications. This rule is looking for each branch of the code that checks for which HTTP method is being used. This is in one large conjunction, and all branches are then tied together via disjunction. The grouping is intentionally designed so that if any part of the DGA is re-used in another sample, this signature should match that re-used portion. SUNBURST is a backdoor that has the ability to spawn and kill processes, write and delete files, set and create registry keys, gather system information, and disable a set of forensic analysis tools and services.\"\r\n        source = \"https://github.com/fireeye/sunburst_countermeasures/blob/main/rules/SUNBURST/yara/APT_Backdoor_MSIL_SUNBURST_2.yar\"\r\n    \r\n    strings:\r\n        $a = \"0y3Kzy8BAA==\" wide\r\n        $aa = \"S8vPKynWL89PS9OvNqjVrTYEYqNa3fLUpDSgTLVxrR5IzggA\" wide\r\n        $ab = \"S8vPKynWL89PS9OvNqjVrTYEYqPaauNaPZCYEQA=\" wide\r\n        $ac = \"C88sSs1JLS4GAA==\" wide\r\n        $ad = \"C/UEAA==\" wide\r\n        $ae = \"C89MSU8tKQYA\" wide\r\n        $af = \"8wvwBQA=\" wide\r\n        $ag = \"cyzIz8nJBwA=\" wide\r\n        $ah = \"c87JL03xzc/LLMkvysxLBwA=\" wide\r\n        $ai = \"88tPSS0GAA==\" wide\r\n        $aj = \"C8vPKc1NLQYA\" wide\r\n        $ak = \"88wrSS1KS0xOLQYA\" wide\r\n        $al = \"c87PLcjPS80rKQYA\" wide\r\n        $am = \"Ky7PLNAvLUjRBwA=\" wide\r\n        $an = \"06vIzQEA\" wide\r\n        $b = \"0y3NyyxLLSpOzIlPTgQA\" wide\r\n        $c = \"001OBAA=\" wide\r\n        $d = \"0y0oysxNLKqMT04EAA==\" wide\r\n        $e = \"0y3JzE0tLknMLQAA\" wide\r\n        $f = \"003PyU9KzAEA\" wide\r\n        $h = \"0y1OTS4tSk1OBAA=\" wide\r\n        $i = \"K8jO1E8uytGvNqitNqytNqrVA/IA\" wide\r\n        $j = \"c8rPSQEA\" wide\r\n        $k = \"c8rPSfEsSczJTAYA\" wide\r\n        $l = \"c60oKUp0ys9JAQA=\" wide\r\n        $m = \"c60oKUp0ys9J8SxJzMlMBgA=\" wide\r\n        $n = \"8yxJzMlMBgA=\" wide\r\n        $o = \"88lMzygBAA==\" wide\r\n        $p = \"88lMzyjxLEnMyUwGAA==\" wide\r\n        $q = \"C0pNL81JLAIA\" wide\r\n        $r = \"C07NzXTKz0kBAA==\" wide\r\n        $s = \"C07NzXTKz0nxLEnMyUwGAA==\" wide\r\n        $t = \"yy9IzStOzCsGAA==\" wide\r\n        $u = \"y8svyQcA\" wide\r\n        $v = \"SytKTU3LzysBAA==\" wide\r\n        $w = \"C84vLUpOdc5PSQ0oygcA\" wide\r\n        $x = \"C84vLUpODU4tykwLKMoHAA==\" wide\r\n        $y = \"C84vLUpO9UjMC07MKwYA\" wide\r\n        $z = \"C84vLUpO9UjMC04tykwDAA==\" wide\r\n    condition:\r\n        ($a and $b and $c and $d and $e and $f and $h and $i) or ($j and $k and $l and $m and $n and $o and $p and $q and $r and $s and ($aa or $ab)) or ($t and $u and $v and $w and $x and $y and $z and ($aa or $ab)) or ($ac and $ad and $ae and $af and $ag and $ah and ($am or $an)) or ($ai and $aj and $ak and $al and ($am or $an))\r\n}\r\n\r\nprivate rule APT_Backdoor_MSIL_SUNBURST_3\r\n{\r\n    meta:\r\n        author = \"FireEye\"\r\n        description = \"This rule is looking for certain portions of the SUNBURST backdoor that deal with C2 communications. SUNBURST is a backdoor that has the ability to spawn and kill processes, write and delete files, set and create registry keys, gather system information, and disable a set of forensic analysis tools and services.\"\r\n        source = \"https://github.com/fireeye/sunburst_countermeasures/blob/main/rules/SUNBURST/yara/APT_Backdoor_MSIL_SUNBURST_3.yar\"\r\n    \r\n    strings:\r\n        $sb1 = { 05 14 51 1? 0A 04 28 [2] 00 06 0? [0-16] 03 1F ?? 2E ?? 03 1F ?? 2E ?? 03 1F ?? 2E ?? 03 1F [1-32] 03 0? 05 28 [2] 00 06 0? [0-32] 03 [0-16] 59 45 06 }\r\n        $sb2 = { FE 16 [2] 00 01 6F [2] 00 0A 1? 8D [2] 00 01 [0-32] 1? 1? 7B 9? [0-16] 1? 1? 7D 9? [0-16] 6F [2] 00 0A 28 [2] 00 0A 28 [2] 00 0A [0-32] 02 7B [2] 00 04 1? 6F [2] 00 0A [2-32] 02 7B [2] 00 04 20 [4] 6F [2] 00 0A [0-32] 13 ?? 11 ?? 11 ?? 6E 58 13 ?? 11 ?? 11 ?? 9? 1? [0-32] 60 13 ?? 0? 11 ?? 28 [4] 11 ?? 11 ?? 9? 28 [4] 28 [4-32] 9? 58 [0-32] 6? 5F 13 ?? 02 7B [2] 00 04 1? ?? 1? ?? 6F [2] 00 0A 8D [2] 00 01 }\r\n        $ss1 = \"\\x00set_UseShellExecute\\x00\"\r\n        $ss2 = \"\\x00ProcessStartInfo\\x00\"\r\n        $ss3 = \"\\x00GetResponseStream\\x00\"\r\n        $ss4 = \"\\x00HttpWebResponse\\x00\"\r\n    \r\n    condition:\r\n        (uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550) and all of them\r\n}\r\n\r\nprivate rule APT_Backdoor_MSIL_SUNBURST_4\r\n{\r\n    meta:\r\n        author = \"FireEye\"\r\n        description = \"This rule is looking for specific methods used by the SUNBURST backdoor. SUNBURST is a backdoor that has the ability to spawn and kill processes, write and delete files, set and create registry keys, gather system information, and disable a set of forensic analysis tools and services.\"\r\n        source = \"https://github.com/fireeye/sunburst_countermeasures/blob/main/rules/SUNBURST/yara/APT_Backdoor_MSIL_SUNBURST_4.yar\"\r\n    \r\n    strings:\r\n        $ss1 = \"\\x00set_UseShellExecute\\x00\"\r\n        $ss2 = \"\\x00ProcessStartInfo\\x00\"\r\n        $ss3 = \"\\x00GetResponseStream\\x00\"\r\n        $ss4 = \"\\x00HttpWebResponse\\x00\"\r\n        $ss5 = \"\\x00ExecuteEngine\\x00\"\r\n        $ss6 = \"\\x00ParseServiceResponse\\x00\"\r\n        $ss7 = \"\\x00RunTask\\x00\"\r\n        $ss8 = \"\\x00CreateUploadRequest\\x00\"\r\n    \r\n    condition:\r\n        (uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550) and all of them\r\n}\r\n\r\nprivate rule APT_Dropper_Raw64_TEARDROP_1\r\n{\r\n    meta:\r\n        author = \"FireEye\"\r\n        description = \"This rule looks for portions of the TEARDROP backdoor that are vital to how it functions. TEARDROP is a memory only dropper that can read files and registry keys, XOR decode an embedded payload, and load the payload into memory. TEARDROP persists as a Windows service and has been observed dropping Cobalt Strike BEACON into memory.\"\r\n        source = \"https://github.com/fireeye/sunburst_countermeasures/blob/main/rules/TEARDROP/yara/APT_Dropper_Raw64_TEARDROP_1.yar\"\r\n    \r\n    strings:\r\n        $sb1 = { C7 44 24 ?? 80 00 00 00 [0-64] BA 00 00 00 80 [0-32] 48 8D 0D [4-32] FF 15 [4] 48 83 F8 FF [2-64] 41 B8 40 00 00 00 [0-64] FF 15 [4-5] 85 C0 7? ?? 80 3D [4] FF }\r\n        $sb2 = { 80 3D [4] D8 [2-32] 41 B8 04 00 00 00 [0-32] C7 44 24 ?? 4A 46 49 46 [0-32] E8 [4-5] 85 C0 [2-32] C6 05 [4] 6A C6 05 [4] 70 C6 05 [4] 65 C6 05 [4] 67 }\r\n        $sb3 = { BA [4] 48 89 ?? E8 [4] 41 B8 [4] 48 89 ?? 48 89 ?? E8 [4] 85 C0 7? [1-32] 8B 44 24 ?? 48 8B ?? 24 [1-16] 48 01 C8 [0-32] FF D0 }\r\n    \r\n    condition:\r\n        all of them\r\n}\r\n\r\nprivate rule APT_Dropper_Win64_TEARDROP_2\r\n{\r\n    meta:\r\n        author = \"FireEye\"\r\n        description = \"This rule is intended match specific sequences of opcode found within TEARDROP, including those that decode the embedded payload. TEARDROP is a memory only dropper that can read files and registry keys, XOR decode an embedded payload, and load the payload into memory. TEARDROP persists as a Windows service and has been observed dropping Cobalt Strike BEACON into memory.\"\r\n        source = \"https://github.com/fireeye/sunburst_countermeasures/blob/main/rules/TEARDROP/yara/APT_Dropper_Win64_TEARDROP_2.yar\"\r\n    \r\n    strings:\r\n        $loc_4218FE24A5 = { 48 89 C8 45 0F B6 4C 0A 30 }\r\n        $loc_4218FE36CA = { 48 C1 E0 04 83 C3 01 48 01 E8 8B 48 28 8B 50 30 44 8B 40 2C 48 01 F1 4C 01 FA }\r\n        $loc_4218FE2747 = { C6 05 ?? ?? ?? ?? 6A C6 05 ?? ?? ?? ?? 70 C6 05 ?? ?? ?? ?? 65 C6 05 ?? ?? ?? ?? 67 }\r\n        $loc_5551D725A0 = { 48 89 C8 45 0F B6 4C 0A 30 48 89 CE 44 89 CF 48 F7 E3 48 C1 EA 05 48 8D 04 92 48 8D 04 42 48 C1 E0 04 48 29 C6 }\r\n        $loc_5551D726F6 = { 53 4F 46 54 57 41 52 45 ?? ?? ?? ?? 66 74 5C 43 ?? ?? ?? ?? 00 }\r\n    \r\n    condition:\r\n        (uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550) and any of them\r\n}\r\n\r\nimport \"pe\"\r\nprivate rule SentinelLabs_SUPERNOVA\r\n{\r\n    meta:\r\n        description = \"Identifies potential versions of App_Web_logoimagehandler.ashx.b6031896.dll weaponized with SUPERNOVA\"\r\n        date = \"2020-12-22\"\r\n        author = \"SentinelLabs\"\r\n        source = \"https://labs.sentinelone.com/solarwinds-understanding-detecting-the-supernova-webshell-trojan/\"\r\n        \r\n    strings:\r\n        $ = \"clazz\"\r\n        $ = \"codes\"\r\n        $ = \"args\"\r\n        $ = \"ProcessRequest\"\r\n        $ = \"DynamicRun\"\r\n        $ = \"get_IsReusable\"\r\n        $ = \"logoimagehandler.ashx\" wide\r\n        $ = \"SiteNoclogoImage\" wide\r\n        $ = \"SitelogoImage\" wide\r\n\r\n    condition:\r\n        (uint16(0) == 0x5A4D and uint32(uint32(0x3C)) == 0x00004550 and pe.imports(\"mscoree.dll\")) and all of them\r\n}\r\n\r\nrule SolarWindsArtifacts\r\n{\r\n    meta:\r\n        author = \"NSA Cybersecurity\"\r\n        description = \"Artifacts common to the SolarWinds compromise.\"\r\n\r\n    condition:\r\n        APT_Backdoor_MSIL_SUNBURST_1 \r\n        or APT_Backdoor_MSIL_SUNBURST_2 \r\n        or APT_Backdoor_MSIL_SUNBURST_3 \r\n        or APT_Backdoor_MSIL_SUNBURST_4 \r\n        or APT_Dropper_Raw64_TEARDROP_1 \r\n        or APT_Dropper_Win64_TEARDROP_2\r\n        or SentinelLabs_SUPERNOVA\r\n}\r\n\r\nrule reGeorg_Variant_Web_shell {\r\n    meta:\r\n        description = \"Matches the reGeorg variant web shell used by the actors.\"\r\n        date = \"2021-07-01\"\r\n        author = \"National Security Agency\"\r\n        source = \"https://media.defense.gov/2021/Jul/01/2002753896/-1/-1/1/CSA_GRU_GLOBAL_BRUTE_FORCE_CAMPAIGN_UOO158036-21.PDF\"\r\n        \r\n    strings:\r\n        $pageLanguage = \"<%@ Page Language=\\\"C#\\\"\"\r\n        $obfuscationFunction = \"StrTr\"\r\n        $target = \"target_str\"\r\n        $IPcomms = \"System.Net.IPEndPoint\"\r\n        $addHeader = \"Response.AddHeader\"\r\n        $socket = \"Socket\"\r\n        \r\n    condition:\r\n        5 of them\r\n}"
            usr_mtd:
                enabled: true
                expiry: 0
                tags: []
                comment: ""